{"version":3,"sources":["api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["POSTS_URL","request","path","a","fetch","response","json","result","data","PostsList","posts","setSelectedPost","selectedPost","className","map","post","key","id","userId","title","type","onClick","COMMENTS_URL","options","NewCommentForm","loadPostComments","useState","newCommentName","setNewCommentName","newCommentEmail","setNewCommentEmail","newCommentBody","setNewCommentBody","sendData","postId","name","email","body","method","JSON","stringify","then","onSubmit","event","preventDefault","placeholder","autoComplete","required","value","onChange","target","PostDetails","postDetails","setPostDetails","commentData","setCommentData","hideComments","setHideComments","commentsFromServer","filter","comment","useEffect","postFromServer","length","commentId","App","allPosts","setAllPosts","selectedUser","setSelectedUser","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"2WAAMA,EAAY,uC,SAEHC,E,8EAAf,WAAuBC,GAAvB,iBAAAC,EAAA,sEACyBC,MAAMF,GAD/B,cACQG,EADR,gBAEuBA,EAASC,OAFhC,cAEQC,EAFR,yBAISA,EAAOC,MAJhB,4C,gCCEaC,EAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MACAC,EAFuB,EAEvBA,gBACAC,EAHuB,EAGvBA,aAHuB,OAKvB,yBAAKC,UAAU,aACb,sCACA,wBAAIA,UAAU,mBACXH,EAAMI,KAAI,SAAAC,GAAI,OACb,wBAAIF,UAAU,kBAAkBG,IAAKD,EAAKE,IACxC,6BACE,4CACaF,EAAKG,OADlB,OAGCH,EAAKI,OAER,4BACEC,KAAK,SACLP,UAAU,2BACVQ,QAAS,WACHT,IAAiBG,EAAKE,GACxBN,EAAgBI,EAAKE,IAErBN,EAAgB,KAInBC,IAAiBG,EAAKE,GAAK,QAAU,eC9B5CK,G,MAAe,2C,SAENrB,E,gFAAf,WAAuBC,EAAMqB,GAA7B,iBAAApB,EAAA,sEACyBC,MAAM,GAAD,OAAIF,GAAQqB,GAD1C,cACQlB,EADR,gBAEuBA,EAASC,OAFhC,cAEQC,EAFR,yBAISA,EAAOC,MAJhB,4C,sBCGO,IAAMgB,EAAiB,SAAC,GAAwC,IAAtCZ,EAAqC,EAArCA,aAAca,EAAuB,EAAvBA,iBAAuB,EACxBC,mBAAS,IADe,mBAC7DC,EAD6D,KAC7CC,EAD6C,OAEtBF,mBAAS,IAFa,mBAE7DG,EAF6D,KAE5CC,EAF4C,OAGxBJ,mBAAS,IAHe,mBAG7DK,EAH6D,KAG7CC,EAH6C,KAKpE,SAASC,IDSJ,IAAoBC,EAAQC,EAAMC,EAAOC,ECR3CV,GAAkBE,GAAmBE,IDQfG,ECNnBtB,EDM2BuB,ECL3BR,EDKiCS,ECJjCP,EDIwCQ,ECHxCN,EDIC9B,EAAQqB,EAAc,CAC3BgB,OAAQ,OACRD,KAAME,KAAKC,UAAU,CACnBN,SACAC,OACAC,QACAC,YCTEI,KAAKhB,GAETG,EAAkB,IAClBE,EAAmB,IACnBE,EAAkB,IAGpB,OACE,0BACEnB,UAAU,iBACV6B,SAAU,SAACC,GACTA,EAAMC,iBACNX,MAGF,yBAAKpB,UAAU,cACb,2BACEO,KAAK,OACLe,KAAK,OACLU,YAAY,YACZhC,UAAU,wBACViC,aAAa,MACbC,UAAQ,EACRC,MAAOrB,EACPsB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBtB,EAAkBsB,EAAOF,WAIvD,yBAAKnC,UAAU,cACb,2BACEO,KAAK,QACLe,KAAK,QACLU,YAAY,aACZhC,UAAU,wBACViC,aAAa,MACbC,UAAQ,EACRC,MAAOnB,EACPoB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBpB,EAAmBoB,EAAOF,WAIxD,yBAAKnC,UAAU,cACb,8BACEsB,KAAK,OACLU,YAAY,oBACZhC,UAAU,wBACViC,aAAa,MACbC,UAAQ,EACRC,MAAOjB,EACPkB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBlB,EAAkBkB,EAAOF,WAIvD,4BACE5B,KAAK,SACLP,UAAU,wCAFZ,mBChEOsC,G,MAAc,SAAC,GAAsB,IAApBvC,EAAmB,EAAnBA,aAAmB,EACTc,mBAAS,IADA,mBACxC0B,EADwC,KAC3BC,EAD2B,OAET3B,mBAAS,IAFA,mBAExC4B,EAFwC,KAE3BC,EAF2B,OAGP7B,oBAAS,GAHF,mBAGxC8B,EAHwC,KAG1BC,EAH0B,KAK/C,SAAShC,IFDFxB,EAAQqB,GEGVmB,MAAK,SAAAiB,GAAkB,OAAIH,EAAeG,EACxCC,QAAO,SAAAC,GAAO,OAAIA,EAAQ1B,SAAWtB,SAa5C,OAVAiD,qBAAU,WJLL,IAAwB3B,KIMZtB,EJLVX,EAAQ,GAAD,OAAID,EAAJ,YAAiBkC,KIM1BO,MAAK,SAACqB,GACDlD,GACFyC,EAAeS,MAGrBrC,MACC,CAACb,IAIF,yBAAKC,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,4BAAKuC,EAAYjC,OACjB,2BAAIiC,EAAYf,OAGlB,6BAASxB,UAAU,yBACjB,4BACEO,KAAK,SACLP,UAAU,SACVQ,QAAS,WACPoC,GAAiBD,KAJrB,UAOMA,EAAe,OAAS,OAP9B,YAOwCF,EAAYS,OAPpD,cASCP,GACC,oCACE,wBAAI3C,UAAU,qBACXyC,EAAYxC,KAAI,SAAA8C,GAAO,OACtB,wBAAI/C,UAAU,yBAAyBG,IAAK4C,EAAQ3C,IAClD,4BACEG,KAAK,SACLP,UAAU,oCACVQ,QAAS,WF1CtB,IAAuB2C,KE2CMJ,EAAQ3C,GF1CnChB,EAAQ,GAAD,OAAIqB,EAAJ,YAAoB0C,GAAa,CAC7C1B,OAAQ,YE0CaG,KAAKhB,KALZ,KAUA,2BAAImC,EAAQvB,aAQxB,iCACE,yBAAKxB,UAAU,6BACb,kBAAC,EAAD,CACED,aAAcA,EACda,iBAAkBA,SCPfwC,EA5DH,WAAO,IAAD,EACgBvC,mBAAS,IADzB,mBACTwC,EADS,KACCC,EADD,OAEwBzC,mBAAS,GAFjC,mBAET0C,EAFS,KAEKC,EAFL,OAGwB3C,mBAAS,GAHjC,mBAGTd,EAHS,KAGKD,EAHL,KAiBhB,OAZAkD,qBAAU,WLHH5D,EAAQD,GKKVyC,MAAK,SAAC6B,GAEHH,EADEC,EACUE,EACTX,QAAO,SAAA5C,GAAI,OAAIA,EAAKG,SAAWkD,KAEtBE,QAGjB,CAACF,IAGF,yBAAKvD,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVoC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBmB,GAAiBnB,EAAOF,SAElD,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,iBACA,4BAAQA,MAAM,KAAd,gBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,wBACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,KAAd,4BACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,MAAd,oBAKN,0BAAMnC,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEH,MAAOwD,EACPvD,gBAAiBA,EACjBC,aAAcA,KAIlB,yBAAKC,UAAU,gBACO,IAAjBD,GACA,kBAAC,EAAD,CAAaA,aAAcA,QCxDxC2D,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8d0d8acc.chunk.js","sourcesContent":["const POSTS_URL = 'https://mate-api.herokuapp.com/posts';\n\nasync function request(path) {\n  const response = await fetch(path);\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport function getUserPosts() {\n  return request(POSTS_URL);\n}\n\nexport function getPostDetails(postId) {\n  return request(`${POSTS_URL}/${postId}`);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  setSelectedPost,\n  selectedPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li className=\"PostsList__item\" key={post.id}>\n          <div>\n            <b>\n              {`[User #${post.userId}]:`}\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={() => {\n              if (selectedPost !== post.id) {\n                setSelectedPost(post.id);\n              } else {\n                setSelectedPost(0);\n              }\n            }}\n          >\n            {selectedPost === post.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  })).isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n  selectedPost: PropTypes.number.isRequired,\n};\n","\nconst COMMENTS_URL = 'https://mate-api.herokuapp.com/comments';\n\nasync function request(path, options) {\n  const response = await fetch(`${path}`, options);\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport function getPostComments() {\n  return request(COMMENTS_URL);\n}\n\nexport function deleteComment(commentId) {\n  return request(`${COMMENTS_URL}/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function addComment(postId, name, email, body) {\n  return request(COMMENTS_URL, {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\nexport const NewCommentForm = ({ selectedPost, loadPostComments }) => {\n  const [newCommentName, setNewCommentName] = useState('');\n  const [newCommentEmail, setNewCommentEmail] = useState('');\n  const [newCommentBody, setNewCommentBody] = useState('');\n\n  function sendData() {\n    (newCommentName && newCommentEmail && newCommentBody)\n      && addComment(\n        selectedPost,\n        newCommentName,\n        newCommentEmail,\n        newCommentBody,\n      ).then(loadPostComments);\n\n    setNewCommentName('');\n    setNewCommentEmail('');\n    setNewCommentBody('');\n  }\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        sendData();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          autoComplete=\"off\"\n          required\n          value={newCommentName}\n          onChange={({ target }) => setNewCommentName(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          autoComplete=\"off\"\n          required\n          value={newCommentEmail}\n          onChange={({ target }) => setNewCommentEmail(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          autoComplete=\"off\"\n          required\n          value={newCommentBody}\n          onChange={({ target }) => setNewCommentBody(target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  loadPostComments: PropTypes.func.isRequired,\n  selectedPost: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPost }) => {\n  const [postDetails, setPostDetails] = useState([]);\n  const [commentData, setCommentData] = useState([]);\n  const [hideComments, setHideComments] = useState(true);\n\n  function loadPostComments() {\n    getPostComments()\n      .then(commentsFromServer => setCommentData(commentsFromServer\n        .filter(comment => comment.postId === selectedPost)));\n  }\n\n  useEffect(() => {\n    getPostDetails(selectedPost)\n      .then((postFromServer) => {\n        if (selectedPost) {\n          setPostDetails(postFromServer);\n        }\n      });\n    loadPostComments();\n  }, [selectedPost]);\n\n  return (\n\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <h3>{postDetails.title}</h3>\n        <p>{postDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setHideComments(!hideComments);\n          }}\n        >\n          {`${hideComments ? 'Show' : 'Hide'} ${commentData.length} comments`}\n        </button>\n        {hideComments && (\n          <>\n            <ul className=\"PostDetails__list\">\n              {commentData.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deleteComment(comment.id)\n                        .then(loadPostComments);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPost={selectedPost}\n            loadPostComments={loadPostComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPost: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getUserPosts } from './api/posts';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [allPosts, setAllPosts] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPost, setSelectedPost] = useState(0);\n\n  useEffect(() => {\n    getUserPosts()\n      .then((postsFromServer) => {\n        if (selectedUser) {\n          setAllPosts(postsFromServer\n            .filter(post => post.userId === selectedUser));\n        } else {\n          setAllPosts(postsFromServer);\n        }\n      });\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={({ target }) => setSelectedUser(+target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={allPosts}\n            setSelectedPost={setSelectedPost}\n            selectedPost={selectedPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          { (selectedPost !== 0)\n          && <PostDetails selectedPost={selectedPost} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}